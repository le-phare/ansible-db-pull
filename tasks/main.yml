- name: Ensure database dump folder exists
  file:
    path: "{{ db_pull_remote_backup_path }}"
    state: directory

- name: Find existing local dump
  delegate_to: localhost
  become: false
  find:
    paths: "{{ db_pull_local_backup_path }}"
    patterns: "{{ db_pull_remote_database_name }}.dump"
    age: "{{ db_pull_max_age }}"
  register: local_dump

- include_tasks: "{{ db_pull_database_type }}/dump.yml"
  when: local_dump.matched == 0

- name: Replicate database to anonymization database
  shell: >
    PGPASSWORD="{{ db_pull_anonymization_remote_database_password }}" {{ db_pull_postgresql_pg_restore_binary_path }} \
      -U {{ db_pull_anonymization_remote_database_user }} \
      -h {{ db_pull_anonymization_remote_database_host }} \
      -p {{ db_pull_anonymization_remote_database_port }} \
      -d {{ db_pull_anonymization_remote_database_name }} \
      --clean --if-exists --no-owner --no-acl \
      {{ db_pull_remote_backup_path }}/{{ db_pull_remote_database_name }}-{{ ansible_date_time.iso8601 }}.dump
  when: db_pull_anonymization

- name: Anonymize using DbToolsBundle
  shell: "{{ db_pull_anonymization_command }}"
  when: db_pull_anonymization

- name: Ensure database dump folder exists
  delegate_to: localhost
  become: false
  file:
    path: "{{ db_pull_local_backup_path }}"
    state: directory
  when: local_dump.matched == 0

- name: Download backup
  fetch:
    src: "{{ db_pull_remote_backup_path }}/{{ db_pull_remote_database_name }}-{{ ansible_date_time.iso8601 }}.dump"
    dest: "{{ db_pull_local_backup_path }}/{{ db_pull_remote_database_name }}.dump"
    flat: yes
  when: local_dump.matched == 0

- include_tasks: "{{ db_pull_database_type }}/drop.yml"

- include_tasks: "{{ db_pull_database_type }}/create.yml"

- include_tasks: "{{ db_pull_database_type }}/restore.yml"

- name: Find all backups
  find:
    paths: "{{ db_pull_remote_backup_path }}"
    pattern: "{{ db_pull_remote_database_name }}-*"
    file_type: file
  register: olderBackups

- name: keep only the most recent files
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ (olderBackups.files | sort(attribute='ctime', reverse=True))[db_pull_keep_backup:] | list }}"
